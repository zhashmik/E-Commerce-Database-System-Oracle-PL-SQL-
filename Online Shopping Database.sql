----------Online Shopping Database (E-commerce)------------

---CREATING THE SCHEMA--------------

CREATE TABLE USERS
(
USER_ID NUMBER(10) PRIMARY KEY,
NAME VARCHAR2(100),
EMAIL VARCHAR2(100) UNIQUE,
PHONE VARCHAR2(15),
ADDRESS VARCHAR2(255),
ROLE VARCHAR2(20)
);


CREATE TABLE PRODUCTS
(
PRODUCT_ID NUMBER(10) PRIMARY KEY,
NAME VARCHAR2(100),
DESCRIPTION VARCHAR2(255),
PRICE NUMBER(10,2),
STOCK_QUANTITY NUMBER(5),
CATEGORY VARCHAR2(50)
);

CREATE TABLE ORDERS
(
ORDER_ID NUMBER(10) PRIMARY KEY,
USER_ID NUMBER(10) REFERENCES USERS(USER_ID),
ORDER_DATE DATE,
PRICE NUMBER(10,2),
STATUS VARCHAR2(20),
TOTAL_AMOUNT NUMBER(10,2)
);



CREATE TABLE ORDER_ITEMS
(
ORDER_ITEM_ID NUMBER(10) PRIMARY KEY,
ORDER_ID NUMBER(10) REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
PRODUCT_ID NUMBER(10) REFERENCES PRODUCTS(PRODUCT_ID),
QUANTITY NUMBER(5),
STATUS VARCHAR2(20),
SUBTOTAL NUMBER(10,2)
);


CREATE TABLE PAYMENTS
(
PAYMENT_ID NUMBER(10) PRIMARY KEY,
ORDER_ID NUMBER(10) REFERENCES ORDERS(ORDER_ID),
PAYMENT_METHOD VARCHAR2(50),
TRANSACTION_ID VARCHAR2(100),
AMOUNT NUMBER(10,2),
PAYMENT_STATUS VARCHAR2(20)
);

CREATE TABLE SHIPMENTS
(
SHIPMENT_ID NUMBER(10) PRIMARY KEY,
ORDER_ID NUMBER(10) REFERENCES ORDERS(ORDER_ID),
TRACKING_NUMBER VARCHAR2(50) UNIQUE,
COURIER VARCHAR2(50),
ESTIMATED_DELIVERY DATE,
STATUS VARCHAR2(20)
);

----------------------------------------CREATING PACKAGES----------------------------------------

--------------USER OPERATIONS-------------------
CREATE OR REPLACE PACKAGE E_COMMERCE_OPERATIONS_USERS
IS
-------to insert a user-------------------------------
    PROCEDURE INSERT_USER(UID    IN USERS.USER_ID%TYPE,NM IN USERS.NAME%TYPE,EML IN USERS.EMAIL%TYPE,PHN IN USERS.PHONE%TYPE,ADR IN USERS.ADDRESS%TYPE,RL IN USERS.ROLE%TYPE,RESULT OUT VARCHAR2 );
-------to update user details like, phone, email, address-------------------------------
    PROCEDURE UPDATE_USER_DETAILS(UID IN USERS.USER_ID%TYPE,EML IN USERS.EMAIL%TYPE,PHN IN USERS.PHONE%TYPE,ADR IN USERS.ADDRESS%TYPE,RESULT OUT VARCHAR2);
-------to delete a user-------------------------------
    PROCEDURE DELETE_USERS(UID IN USERS.USER_ID%TYPE,RESULT OUT VARCHAR2);

    TYPE T IS REF CURSOR RETURN USERS%ROWTYPE; 
-------to delete a user-------------------------------
    PROCEDURE FETCH_ALL_CUSTOMERS(X OUT T);
-------to see all admins------------------------------- 
    PROCEDURE FETCH_ALL_ADMINS(X OUT T);

END;
/

CREATE OR REPLACE PACKAGE BODY E_COMMERCE_OPERATIONS_USERS
IS
-------to insert a user-------------------------------
          PROCEDURE INSERT_USER(UID IN USERS.USER_ID%TYPE, NM IN USERS.NAME%TYPE, EML IN USERS.EMAIL%TYPE,PHN IN USERS.PHONE%TYPE, ADR IN USERS.ADDRESS%TYPE, RL IN USERS.ROLE%TYPE,RESULT OUT VARCHAR2) 
          IS
          BEGIN
          IF UPPER(RL) NOT IN ('CUSTOMER', 'ADMIN') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID ROLE');
          END IF;
              INSERT INTO USERS (USER_ID, NAME, EMAIL, PHONE, ADDRESS, ROLE)  VALUES (UID, NM, EML, PHN, ADR, RL);
              RESULT := SQL%ROWCOUNT || ' RECORD INSERTED INTO USERS';
              DBMS_OUTPUT.PUT_LINE(RESULT);
          EXCEPTION WHEN OTHERS THEN
              RESULT := 'ERROR INSERTING USER: ' || SQLERRM;
              DBMS_OUTPUT.PUT_LINE(RESULT);
          END;
-------to update user details like, phone, email, address-------------------------------
          PROCEDURE UPDATE_USER_DETAILS(UID IN USERS.USER_ID%TYPE,EML IN USERS.EMAIL%TYPE,PHN IN USERS.PHONE%TYPE,ADR IN USERS.ADDRESS%TYPE,RESULT OUT VARCHAR2)
          IS
          BEGIN
          IF UPPER(RL) NOT IN ('CUSTOMER', 'ADMIN') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID ROLE');
          END IF;
              UPDATE USERS SET EMAIL=EML,PHONE=PHN,ADDRESS=ADR WHERE USER_ID=UID;              
              IF SQL%ROWCOUNT = 0 THEN
                        RESULT := 'NO USER FOUND WITH ID ' || UID;
              ELSE
                        RESULT := SQL%ROWCOUNT || ' RECORD UPDATED';
              END IF;
              EXCEPTION WHEN OTHERS THEN
                        RESULT := 'ERROR UPDATING USER: ' || SQLERRM;
                        DBMS_OUTPUT.PUT_LINE(RESULT);
          END;
-------to delete a user-------------------------------
          PROCEDURE DELETE_USERS(UID IN USERS.USER_ID%TYPE, RESULT OUT VARCHAR2) 
          IS
          BEGIN
              DELETE FROM USERS WHERE USER_ID=UID;
              RESULT := SQL%ROWCOUNT || ' RECORD DELETED FROM USERS';
              DBMS_OUTPUT.PUT_LINE(RESULT);
          EXCEPTION WHEN OTHERS THEN
              RESULT := 'ERROR DELETING USER: ' || SQLERRM;
              DBMS_OUTPUT.PUT_LINE(RESULT);
          END;
-------to delete a user-------------------------------
          PROCEDURE FETCH_ALL_CUSTOMERS(X OUT T)
          IS
          BEGIN
               OPEN X FOR SELECT * FROM USERS WHERE ROLE='CUSTOMER';
          END;
-------to see all admins------------------------------- 
          PROCEDURE FETCH_ALL_ADMINS(X OUT T)
          IS
          BEGIN
               OPEN X FOR SELECT * FROM USERS WHERE ROLE='ADMIN';
          END;
END;
/




--------------PRODUCT OPERATIONS-------------------


CREATE OR REPLACE PACKAGE E_COMMERCE_OPERATIONS_PRODUCTS
IS
-------to insert a product-------------------------------
    PROCEDURE INSERT_PRODUCT(PID IN PRODUCTS.PRODUCT_ID%TYPE, NM IN PRODUCTS.NAME%TYPE, DESCR IN PRODUCTS.DESCRIPTION%TYPE, PRICE IN PRODUCTS.PRICE%TYPE, STOCK IN PRODUCTS.STOCK_QUANTITY%TYPE, CAT IN PRODUCTS.CATEGORY%TYPE, RESULT OUT VARCHAR2);

-------to update price and stock of product-------------------------------
    PROCEDURE UPDATE_PRODUCT(PID IN PRODUCTS.PRODUCT_ID%TYPE, PRICE IN PRODUCTS.PRICE%TYPE, STOCK IN PRODUCTS.STOCK_QUANTITY%TYPE, RESULT OUT VARCHAR2);

-------to delete a product-------------------------------
    PROCEDURE DELETE_PRODUCT(PID IN PRODUCTS.PRODUCT_ID%TYPE, RESULT OUT VARCHAR2);

-------to fetch all products-------------------------------
    TYPE T IS REF CURSOR RETURN PRODUCTS%ROWTYPE; 
    PROCEDURE FETCH_ALL_PRODUCTS(X OUT T);

END;
/



CREATE OR REPLACE PACKAGE BODY E_COMMERCE_OPERATIONS_PRODUCTS
IS
-------to insert a product-------------------------------
    PROCEDURE INSERT_PRODUCT(PID IN PRODUCTS.PRODUCT_ID%TYPE, NM IN PRODUCTS.NAME%TYPE, DESCR IN PRODUCTS.DESCRIPTION%TYPE, PRICE IN PRODUCTS.PRICE%TYPE, STOCK IN PRODUCTS.STOCK_QUANTITY%TYPE, CAT IN PRODUCTS.CATEGORY%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        INSERT INTO PRODUCTS (PRODUCT_ID, NAME, DESCRIPTION, PRICE, STOCK_QUANTITY, CATEGORY)
        VALUES (PID, NM, DESCR, PRICE, STOCK, CAT);

        RESULT := SQL%ROWCOUNT || ' RECORD INSERTED INTO PRODUCTS';
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR INSERTING PRODUCT: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
-------to update price and stock of product-------------------------------
    PROCEDURE UPDATE_PRODUCT(PID IN PRODUCTS.PRODUCT_ID%TYPE, PRICE IN PRODUCTS.PRICE%TYPE, STOCK IN PRODUCTS.STOCK_QUANTITY%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        UPDATE PRODUCTS
        SET PRICE = PRICE,
        STOCK_QUANTITY = STOCK
        WHERE PRODUCT_ID = PID;

        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO PRODUCT FOUND WITH ID ' || PID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' RECORD UPDATED IN PRODUCTS';
        END IF;

        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR UPDATING PRODUCT: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
-------to delete a product-------------------------------
    PROCEDURE DELETE_PRODUCT(PID IN PRODUCTS.PRODUCT_ID%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        DELETE FROM PRODUCTS WHERE PRODUCT_ID = PID;

        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO PRODUCT FOUND WITH ID ' || PID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' RECORD DELETED FROM PRODUCTS';
        END IF;

        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR DELETING PRODUCT: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
-------to fetch all products-------------------------------
    PROCEDURE FETCH_ALL_PRODUCTS(X OUT T)
    IS
    BEGIN
        OPEN X FOR SELECT * FROM PRODUCTS;
    END;

END;
/


--------------ORDER and ORDER_ITEMS OPERATIONS-------------------
CREATE OR REPLACE PACKAGE E_COMMERCE_OPERATIONS_ORDERS
IS
    ------to insert an order-------------------------------
    PROCEDURE INSERT_ORDER(OID IN ORDERS.ORDER_ID%TYPE, UID IN ORDERS.USER_ID%TYPE, ODATE IN ORDERS.ORDER_DATE%TYPE, STATUS IN ORDERS.STATUS%TYPE, TOTAL_AMOUNT IN ORDERS.TOTAL_AMOUNT%TYPE, RESULT OUT VARCHAR2);

    ------to insert items for an order and update stock of products-------------------------------
    PROCEDURE INSERT_ORDER_ITEMS(OIID IN ORDER_ITEMS.ORDER_ITEM_ID%TYPE, OID IN ORDER_ITEMS.ORDER_ID%TYPE, PID IN ORDER_ITEMS.PRODUCT_ID%TYPE, QTY IN ORDER_ITEMS.QUANTITY%TYPE, SUBT IN ORDER_ITEMS.SUBTOTAL%TYPE, RESULT OUT VARCHAR2);

    ------to update the status of an order and also check if valid sttus is eneterd-------------------------------
    PROCEDURE UPDATE_ORDER(OID IN ORDERS.ORDER_ID%TYPE, STATUS IN ORDERS.STATUS%TYPE, RESULT OUT VARCHAR2);

    ------to delete an order and its items-------------------------------
    PROCEDURE DELETE_ORDER(OID IN ORDERS.ORDER_ID%TYPE, RESULT OUT VARCHAR2);

    ------to fetch all orders-------------------------------
    TYPE T IS REF CURSOR;
    PROCEDURE FETCH_ALL_ORDERS(X OUT T);

    ------to fetch a specific order and also its items-------------------------------
    PROCEDURE FETCH_ORDER_BY_ID(OID IN ORDERS.ORDER_ID%TYPE, X OUT T);

END;
/


CREATE OR REPLACE PACKAGE BODY E_COMMERCE_OPERATIONS_ORDERS
IS
------to insert an order-------------------------------
    PROCEDURE INSERT_ORDER(OID IN ORDERS.ORDER_ID%TYPE, UID IN ORDERS.USER_ID%TYPE, ODATE IN ORDERS.ORDER_DATE%TYPE, STATUS IN ORDERS.STATUS%TYPE, TOTAL_AMOUNT IN ORDERS.TOTAL_AMOUNT%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        IF UPPER(STATUS) NOT IN ('PENDING', 'SHIPPED','DELIVERED') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID STATUS');
        END IF;
        INSERT INTO ORDERS (ORDER_ID, USER_ID, ORDER_DATE, STATUS, TOTAL_AMOUNT)VALUES (OID, UID, ODATE, STATUS, TOTAL_AMOUNT);
        RESULT := SQL%ROWCOUNT || ' ORDER INSERTED';
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR INSERTING ORDER: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
------to insert items for an order and update stock of products-------------------------------
    PROCEDURE INSERT_ORDER_ITEMS(OIID IN ORDER_ITEMS.ORDER_ITEM_ID%TYPE, OID IN ORDER_ITEMS.ORDER_ID%TYPE, PID IN ORDER_ITEMS.PRODUCT_ID%TYPE, QTY IN ORDER_ITEMS.QUANTITY%TYPE, SUBT IN ORDER_ITEMS.SUBTOTAL%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        INSERT INTO ORDER_ITEMS (ORDER_ITEM_ID, ORDER_ID, PRODUCT_ID, QUANTITY, SUBTOTAL)
        VALUES (OIID, OID, PID, QTY, SUBT);

        -- Update product stock----------------------
        UPDATE PRODUCTS SET STOCK_QUANTITY = STOCK_QUANTITY - QTY
        WHERE PRODUCT_ID = PID;

        RESULT := SQL%ROWCOUNT || ' ORDER ITEM INSERTED AND STOCK UPDATED';
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR INSERTING ORDER ITEM: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
------to update the status of an order-------------------------------
    PROCEDURE UPDATE_ORDER(OID IN ORDERS.ORDER_ID%TYPE, STATUS IN ORDERS.STATUS%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        IF UPPER(STATUS) NOT IN ('PENDING', 'SHIPPED','DELIVERED') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID STATUS');
        END IF;
        UPDATE ORDERS SET STATUS = STATUS
        WHERE ORDER_ID = OID;

        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO ORDER FOUND WITH ID ' || OID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' ORDER STATUS UPDATED';
        END IF;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR UPDATING ORDER: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
------to delete an order and its items-------------------------------
    PROCEDURE DELETE_ORDER(OID IN ORDERS.ORDER_ID%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        DELETE FROM ORDERS WHERE ORDER_ID = OID;

        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO ORDER FOUND WITH ID ' || OID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' ORDER DELETED (ORDER_ITEMS also deleted via CASCADE)';
        END IF;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION
        WHEN OTHERS THEN
            RESULT := 'ERROR DELETING ORDER: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
------to fetch all orders-------------------------------
    PROCEDURE FETCH_ALL_ORDERS(X OUT T)
    IS
    BEGIN
        OPEN X FOR SELECT * FROM ORDERS;
    END;
------to fetch a specific order and also its items-------------------------------
    PROCEDURE FETCH_ORDER_BY_ID(OID IN ORDERS.ORDER_ID%TYPE, X OUT T)
    IS
    BEGIN
        OPEN X FOR 
        SELECT O.*, OI.ORDER_ITEM_ID, OI.PRODUCT_ID, OI.QUANTITY, OI.SUBTOTAL
        FROM ORDERS O
        LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
        WHERE O.ORDER_ID = OID;
    END;

END;
/


--------------Payment OPERATIONS-------------------
CREATE OR REPLACE PACKAGE E_COMMERCE_OPERATIONS_PAYMENTS
IS
    ------to insert a payment and if the payment is failed or refunded then delete hat order and also update product stock and also check if payments status is valid-------------------------------
    PROCEDURE INSERT_PAYMENT(PMTID IN PAYMENTS.PAYMENT_ID%TYPE, OID IN PAYMENTS.ORDER_ID%TYPE, PMETH IN PAYMENTS.PAYMENT_METHOD%TYPE, TXNID IN PAYMENTS.TRANSACTION_ID%TYPE, AMT IN PAYMENTS.AMOUNT%TYPE, PSTAT IN PAYMENTS.PAYMENT_STATUS%TYPE, RESULT OUT VARCHAR2);

    ------to update payment details like transaction ID, status, or method and update stock and order on that basis and also check if payments status is valid-------------------------------
    PROCEDURE UPDATE_PAYMENT(OID in PAYMENTS.ORDER_ID%TYPE,PMTID IN PAYMENTS.PAYMENT_ID%TYPE, PMETH IN PAYMENTS.PAYMENT_METHOD%TYPE, TXNID IN PAYMENTS.TRANSACTION_ID%TYPE, PSTAT IN PAYMENTS.PAYMENT_STATUS%TYPE, RESULT OUT VARCHAR2);

    ------to delete a payment-------------------------------
    PROCEDURE DELETE_PAYMENT(PMTID IN PAYMENTS.PAYMENT_ID%TYPE, RESULT OUT VARCHAR2);

    ------to fetch all payments-------------------------------
    TYPE T IS REF CURSOR;
    PROCEDURE FETCH_ALL_PAYMENTS(X OUT T);
END;
/
    
CREATE OR REPLACE PACKAGE BODY E_COMMERCE_OPERATIONS_PAYMENTS
IS
------to insert a payment and if the payment is failed or refunded then delete hat order and also update product stock  and also check if payments status is valid-------------------------------
    PROCEDURE INSERT_PAYMENT(PMTID IN PAYMENTS.PAYMENT_ID%TYPE, OID IN PAYMENTS.ORDER_ID%TYPE, PMETH IN PAYMENTS.PAYMENT_METHOD%TYPE, TXNID IN PAYMENTS.TRANSACTION_ID%TYPE, AMT IN PAYMENTS.AMOUNT%TYPE, PSTAT IN PAYMENTS.PAYMENT_STATUS%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        IF UPPER(PSTAT) NOT IN ('SUCCESS', 'FAILED','REFUNDED') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID PAYMENT STATUS');
        END IF;
        INSERT INTO PAYMENTS(PAYMENT_ID, ORDER_ID, PAYMENT_METHOD, TRANSACTION_ID, AMOUNT, PAYMENT_STATUS)
        VALUES(PMTID, OID, PMETH, TXNID, AMT, PSTAT);
        RESULT := SQL%ROWCOUNT || ' PAYMENT RECORD INSERTED';
        DBMS_OUTPUT.PUT_LINE(RESULT);
        IF PSTAT IN('FAILED','REFUNDED') THEN
             FOR REC IN(SELECT PRODUCT_ID,QUANTITY FROM ORDER_ITEMS WHERE ORDER_ID=OID) LOOP
                  UPDATE PRODUCTS
                  SET STOCK_QUANTITY=STOCK_QUANTITY+REC.QUANTITY
                  WHERE PRODUCT_ID=REC.PRODUCT_ID;
             END LOOP;
             DELETE FROM ORDERS WHERE ORDER_ID = OID;
             RESULT := RESULT || ' | ORDER DELETED AND STOCK RESTORED';
             DBMS_OUTPUT.PUT_LINE('ORDER ' || OID || ' DELETED AND STOCK UPDATED.');
        END IF;
    EXCEPTION WHEN OTHERS THEN
        RESULT := 'ERROR PROCESSING PAYMENT: ' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
------to update payment details like transaction ID, status, or method  and update stock and order on that basis and also check if payments status is valid-------------------------------

    PROCEDURE UPDATE_PAYMENT(OID in PAYMENTS.ORDER_ID%TYPE,PMTID IN PAYMENTS.PAYMENT_ID%TYPE, PMETH IN PAYMENTS.PAYMENT_METHOD%TYPE, TXNID IN PAYMENTS.TRANSACTION_ID%TYPE, PSTAT IN PAYMENTS.PAYMENT_STATUS%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        IF UPPER(PSTAT) NOT IN ('SUCCESS', 'FAILED','REFUNDED') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID PAYMENT STATUS');
        END IF;
        UPDATE PAYMENTS SET PAYMENT_METHOD=PMETH, TRANSACTION_ID=TXNID, PAYMENT_STATUS=PSTAT
        WHERE PAYMENT_ID=PMTID;
        IF PSTAT IN('FAILED','REFUNDED') THEN
             FOR REC IN(SELECT PRODUCT_ID AS PID,QUANTITY AS QTY FROM ORDER_ITEMS WHERE ORDER_ID=OID) LOOP
                  UPDATE PRODUCTS
                  SET STOCK_QUANTITY=STOCK_QUANTITY+REC.QTY
                  WHERE PRODUCT_ID=REC.PID;
             END LOOP;
             DELETE FROM ORDERS WHERE ORDER_ID = OID;
             RESULT := RESULT || ' | ORDER DELETED AND STOCK RESTORED';
             DBMS_OUTPUT.PUT_LINE('ORDER ' || OID || ' DELETED AND STOCK UPDATED.');
        END IF;
        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO PAYMENT FOUND WITH ID ' || PMTID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' PAYMENT RECORD UPDATED';
        END IF;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION WHEN OTHERS THEN
        RESULT := 'ERROR UPDATING PAYMENT: ' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
------to delete a payment-------------------------------
    PROCEDURE DELETE_PAYMENT(PMTID IN PAYMENTS.PAYMENT_ID%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        DELETE FROM PAYMENTS WHERE PAYMENT_ID=PMTID;
        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO PAYMENT FOUND WITH ID ' || PMTID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' PAYMENT RECORD DELETED';
        END IF;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION WHEN OTHERS THEN
        RESULT := 'ERROR DELETING PAYMENT: ' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    END;
------to fetch all payments-------------------------------
    PROCEDURE FETCH_ALL_PAYMENTS(X OUT T)
    IS
    BEGIN
        OPEN X FOR SELECT * FROM PAYMENTS;
    END;

END;
/




--------------Shipment OPERATIONS-------------------
CREATE OR REPLACE PACKAGE E_COMMERCE_OPERATIONS_SHIPMENTS 
IS
------to insert a shipment----------------------
    PROCEDURE INSERT_SHIPMENT(SID IN SHIPMENTS.SHIPMENT_ID%TYPE, OID IN SHIPMENTS.ORDER_ID%TYPE, TNO IN SHIPMENTS.TRACKING_NUMBER%TYPE, CARR IN SHIPMENTS.COURIER%TYPE, EDATE IN SHIPMENTS.ESTIMATED_DELIVERY%TYPE, STAT IN SHIPMENTS.STATUS%TYPE, RESULT OUT VARCHAR2);
------to update a shipment----------------------
    PROCEDURE UPDATE_SHIPMENT(SID IN SHIPMENTS.SHIPMENT_ID%TYPE, TNO IN SHIPMENTS.TRACKING_NUMBER%TYPE, CARR IN SHIPMENTS.COURIER%TYPE, EDATE IN SHIPMENTS.ESTIMATED_DELIVERY%TYPE, STAT IN SHIPMENTS.STATUS%TYPE, RESULT OUT VARCHAR2);
------to delete a shipment----------------------
    PROCEDURE DELETE_SHIPMENT(SID IN SHIPMENTS.SHIPMENT_ID%TYPE, RESULT OUT VARCHAR2);
------to view all shipments----------------------
    TYPE T IS REF CURSOR;
    PROCEDURE FETCH_ALL_SHIPMENTS(X OUT T);
END;
/



CREATE OR REPLACE PACKAGE BODY E_COMMERCE_OPERATIONS_SHIPMENTS 
IS
------to insert a shipment----------------------
    PROCEDURE INSERT_SHIPMENT(SID IN SHIPMENTS.SHIPMENT_ID%TYPE, OID IN SHIPMENTS.ORDER_ID%TYPE, TNO IN SHIPMENTS.TRACKING_NUMBER%TYPE, CARR IN SHIPMENTS.COURIER%TYPE, EDATE IN SHIPMENTS.ESTIMATED_DELIVERY%TYPE, STAT IN SHIPMENTS.STATUS%TYPE, RESULT OUT VARCHAR2) 
    IS
    BEGIN
        IF STAT NOT IN ('IN TRANSIT', 'DELIVERED') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID SHIPMENT STATUS');
        END IF;
        INSERT INTO SHIPMENTS(SHIPMENT_ID, ORDER_ID, TRACKING_NUMBER, COURIER, ESTIMATED_DELIVERY, STATUS)
        VALUES(SID, OID, TNO, CARR, EDATE, STAT);

        RESULT := SQL%ROWCOUNT || ' SHIPMENT RECORD INSERTED';
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION WHEN OTHERS THEN
        RESULT := 'ERROR INSERTING SHIPMENT: ' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    END;

------to update a shipment----------------------
    PROCEDURE UPDATE_SHIPMENT(SID IN SHIPMENTS.SHIPMENT_ID%TYPE, TNO IN SHIPMENTS.TRACKING_NUMBER%TYPE, CARR IN SHIPMENTS.COURIER%TYPE, EDATE IN SHIPMENTS.ESTIMATED_DELIVERY%TYPE, STAT IN SHIPMENTS.STATUS%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        IF STAT NOT IN ('IN TRANSIT', 'DELIVERED') THEN
               RAISE_APPLICATION_ERROR(-20001, 'INVALID SHIPMENT STATUS');
        END IF;
        UPDATE SHIPMENTS
        SET TRACKING_NUMBER=TNO, COURIER=CARR, ESTIMATED_DELIVERY=EDATE, STATUS=STAT
        WHERE SHIPMENT_ID=SID;
        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO SHIPMENT FOUND WITH ID ' || SID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' SHIPMENT RECORD UPDATED';
        END IF;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION WHEN OTHERS THEN
        RESULT := 'ERROR UPDATING SHIPMENT: ' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    END;

------to delete a shipment----------------------
    PROCEDURE DELETE_SHIPMENT(SID IN SHIPMENTS.SHIPMENT_ID%TYPE, RESULT OUT VARCHAR2)
    IS
    BEGIN
        DELETE FROM SHIPMENTS WHERE SHIPMENT_ID=SID;

        IF SQL%ROWCOUNT = 0 THEN
            RESULT := 'NO SHIPMENT FOUND WITH ID ' || SID;
        ELSE
            RESULT := SQL%ROWCOUNT || ' SHIPMENT RECORD DELETED';
        END IF;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    EXCEPTION WHEN OTHERS THEN
        RESULT := 'ERROR DELETING SHIPMENT: ' || SQLERRM;
        DBMS_OUTPUT.PUT_LINE(RESULT);
    END;

------to view all shipments----------------------
    PROCEDURE FETCH_ALL_SHIPMENTS(X OUT T) 
    IS
    BEGIN
        OPEN X FOR SELECT * FROM SHIPMENTS;
    END;

END;
/



CREATE OR REPLACE PACKAGE GENERAL_PROCEDURES
IS
-------to fetch customer order based on name-----------------------
   TYPE T IS REF CURSOR;
   PROCEDURE FETCH_CUSTOMER_ORDERS(NM IN USERS.NAME%TYPE,X OUT T);
--------Check available stock -----------------
   TYPE S IS REF CURSOR;
   PROCEDURE CHECK_AVAILABLE_STOCK(X OUT S);
--------to track shipment status for an order------------
   TYPE SHIP IS REF CURSOR;
   PROCEDURE TRACK_SHIPMENT_STATUS(OD IN SHIPMENTS.ORDER_ID%TYPE,X OUT SHIP);
END;
/

CREATE OR REPLACE PACKAGE BODY GENERAL_PROCEDURES
IS
-------to fetch customer order based on name-----------------------
    PROCEDURE FETCH_CUSTOMER_ORDERS(NM IN USERS.NAME%TYPE,X OUT T)
    IS
    BEGIN
        OPEN X FOR SELECT O.ORDER_ID,U.NAME,O.ORDER_DATE,O.STATUS,O.TOTAL_AMOUNT FROM ORDERS O JOIN USERS U ON O.USER_ID=U.USER_ID  WHERE U.NAME=NM;
    END;
--------Check available stock -----------------
    PROCEDURE CHECK_AVAILABLE_STOCK(X OUT S)
    IS
    BEGIN
        OPEN X FOR SELECT NAME,STOCK_QUANTITY FROM PRODUCTS WHERE STOCK_QUANTITY>0;
    END;
--------to track shipment status for an order------------
    PROCEDURE TRACK_SHIPMENT_STATUS(OD IN SHIPMENTS.ORDER_ID%TYPE,X OUT SHIP)
    IS
    BEGIN
        OPEN X FOR SELECT S.TRACKING_NUMBER,S.STATUS,S.ESTIMATED_DELIVERY FROM SHIPMENTS S JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID WHERE O.ORDER_ID=OD;
    END;
END;
/

